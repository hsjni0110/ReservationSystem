# 버스 운행 시간대 설정

# 시간대별 분류
TIME_SLOTS = {
    '새벽': ['05:30', '06:00', '06:30'],
    '오전': ['07:00', '07:30', '08:00', '08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30'],
    '오후': ['12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'],
    '저녁': ['18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00']
}

# 요일별 운행 패턴
SCHEDULE_PATTERNS = {
    'weekday': {  # 평일 (월-금)
        '서울권_출발': {
            '장거리': ['06:00', '07:00', '08:00', '09:00', '10:00', '13:00', '14:00', '15:00', '17:00', '18:00', '19:00'],
            '중거리': ['07:00', '09:00', '11:00', '14:00', '16:00', '18:00', '20:00'],
            '단거리': ['08:00', '10:00', '12:00', '15:00', '17:00', '19:00']
        },
        '지방_출발': {
            '장거리': ['05:30', '06:30', '07:30', '08:30', '12:00', '13:00', '14:00', '16:00', '17:00', '18:00'],
            '중거리': ['06:00', '08:00', '10:00', '13:00', '15:00', '17:00', '19:00'],
            '단거리': ['07:00', '09:00', '11:00', '14:00', '16:00', '18:00']
        },
        '지방간': {
            '장거리': ['08:00', '10:00', '14:00', '16:00', '18:00'],
            '중거리': ['09:00', '11:00', '15:00', '17:00'],
            '단거리': ['10:00', '14:00', '16:00']
        }
    },
    'weekend': {  # 주말 (토-일)
        '서울권_출발': {
            '장거리': ['06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '18:00', '19:00'],
            '중거리': ['07:00', '09:00', '11:00', '13:00', '15:00', '17:00', '19:00'],
            '단거리': ['08:00', '10:00', '12:00', '14:00', '16:00', '18:00']
        },
        '지방_출발': {
            '장거리': ['06:00', '07:00', '08:00', '11:00', '13:00', '15:00', '17:00', '19:00', '20:00'],
            '중거리': ['07:00', '09:00', '12:00', '14:00', '16:00', '18:00', '20:00'],
            '단거리': ['08:00', '10:00', '13:00', '15:00', '17:00', '19:00']
        },
        '지방간': {
            '장거리': ['09:00', '11:00', '15:00', '17:00'],
            '중거리': ['10:00', '14:00', '16:00'],
            '단거리': ['11:00', '15:00']
        }
    }
}

# 거리별 분류 기준
DISTANCE_CLASSIFICATION = {
    '장거리': [  # 300km 이상
        ('서울권', '경상남도권'),  # 서울-부산
        ('서울권', '경상북도권'),  # 서울-대구
        ('서울권', '전라권'),     # 서울-광주
        ('경기권', '경상남도권'),  # 경기-부산
        ('경기권', '경상북도권'),  # 경기-대구
        ('충청권', '경상남도권'),  # 대전-부산
        ('강원권', '경상남도권'),  # 강원-부산
    ],
    '중거리': [  # 100-300km
        ('서울권', '충청권'),     # 서울-대전
        ('서울권', '강원권'),     # 서울-강원
        ('경기권', '충청권'),     # 경기-대전
        ('경기권', '전라권'),     # 경기-광주
        ('충청권', '경상북도권'),  # 대전-대구
        ('전라권', '경상남도권'),  # 광주-부산
        ('경상북도권', '경상남도권'), # 대구-부산
    ],
    '단거리': [  # 100km 미만
        ('서울권', '경기권'),     # 서울-경기
        ('경기권', '경기권'),     # 경기 내부
        ('충청권', '충청권'),     # 충청 내부
        ('전라권', '전라권'),     # 전라 내부
        ('경상북도권', '경상북도권'), # 경북 내부
        ('경상남도권', '경상남도권'), # 경남 내부
        ('강원권', '강원권'),     # 강원 내부
    ]
}

def get_all_time_slots():
    """모든 시간대의 평면 리스트 반환"""
    all_slots = []
    for time_group in TIME_SLOTS.values():
        all_slots.extend(time_group)
    return sorted(all_slots)

def get_distance_type(region1, region2):
    """두 권역 간 거리 유형 반환"""
    route_tuple1 = (region1, region2)
    route_tuple2 = (region2, region1)
    
    for distance_type, routes in DISTANCE_CLASSIFICATION.items():
        if route_tuple1 in routes or route_tuple2 in routes:
            return distance_type
    
    # 기본값은 중거리
    return '중거리'

def get_departure_type(region):
    """출발 권역 유형 반환"""
    if region == '서울권':
        return '서울권_출발'
    elif region in ['경기권', '충청권', '전라권', '경상북도권', '경상남도권', '강원권']:
        return '지방_출발'
    else:
        return '지방_출발'

def get_time_slots_for_route(dep_region, arr_region, day_type):
    """특정 노선과 요일에 대한 시간대 반환"""
    if dep_region == arr_region:
        # 같은 권역 내 노선은 지방간으로 처리
        departure_type = '지방간'
    else:
        departure_type = get_departure_type(dep_region)
    
    distance_type = get_distance_type(dep_region, arr_region)
    
    try:
        return SCHEDULE_PATTERNS[day_type][departure_type][distance_type]
    except KeyError:
        # 기본값 반환
        return ['09:00', '14:00', '18:00']